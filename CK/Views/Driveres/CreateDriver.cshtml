@model CK.Models.SalesParameters
@{
    ViewData["Title"] = "Add Car";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!Doctype html>
<html>
<head>
    <link rel="stylesheet" type="text/css" href="/css/datatables.min.css" />
    <link rel="stylesheet" type="text/css" href="/js/datatables.min.css" />
    <style>

        /* Button styles */
        .btn-primary {
            margin-top: 20px;
        }

        /* Responsive grid layout */


        .Title {
            background-color: #b50101;
            font-family: emoji;
            font-weight: bold;
        }

        .input-container {
            display: flex;
            justify-content: space-evenly;
            align-items: center;
            width: 268px;
        }

        #char-typed-input {
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
            width: 300px; /* Adjust the width as needed */
        }

        .unapprove {
            background-color: #d56a6a;
            font-weight: bold;
        }

/*         .dt-buttons {
            display: inline-block;
            vertical-align: middle;
            margin-right: 10px;
        } */

        .dataTables_info, #example_info {
            position: absolute !important;
             left: 12% !important;
             top:0;
             font-weight:bold;
         }

        .custom-toolbar {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 10px;
        }

        .dt-buttons {
            margin-right: 10px;
        }

        .dataTables_length {
            margin-right: 10px;
        }

        .Displayliselect {
            margin-top:15px;
        }
        .Displayfix
        {
            width:270px;
        }

        .lines {
            width: 100%;
            border-bottom: ridge;
            padding:8px;
            opacity: 55%;
        }
    </style>
</head>
<body>
    <div class="row" style="display: block; margin:0 1px">
        <div class="col-md-3">
            <div class="card card-primary collapsed-card" style="width:1500px" id="filterCard">
                <div class="card-header card-title" data-card-widget="collapse" style="color: #034C96;border:1px solid #0000004d;background-color:#0000000f">
                    <h3 class="card-title">Filtering</h3>
                    <div class="card-tools">
                    </div>
                </div>
                <div class="card-body" style="display:block; padding: 20px;transition:max-height 5s ease-in-out;">
                    <form asp-controller="Driveres" asp-action="CreateDriver" method="post" id="InsertForm"enctype="multipart/form-data">
        <ul style="list-style: none;">
            <li class="Displayliselect">
                <label>License StartDate</label>
                <br>
                                <input type="date" class="form-control" id="startDate" name="StartDate" style="width:200px;display:inline-block" required>
            </li>
            <li class="Displayliselect">
                <label>License EndDate</label>
                <br>
                                <input type="date" class="form-control" name="EndDate" id="endDate" style="width:200px;display:inline-block" required>
            </li>
            <br />
            <div class="lines"></div>
            <li class="Displayliselect">
                <label>Driver Name</label>
                                <input type="text" class="FilterSelect form-control" style="width:250px" id="DriverName" name="Parobj.DriverName" required>
            </li>
                            <li class="Displayliselect">
                                <label>Driver Phone</label>
                                <input type="text" class="FilterSelect form-control" style="width:250px" id="DriverPhone" name="Parobj.DriverPhone" required>
                            </li>
                            <br />
                            <div class="lines"></div>
                            <li class="Displayliselect Displayfix">
                                <label>Car Brand</label>
                                <br>
                                <select name="Parobj.CarModel" id="CarModel" class="FilterSelect form-control" style="width:200px">
                                    <option value="NotFound">Choose</option>
                                    <option>Chevrolet Optra</option>
                                    <option>MG 6</option>
                                    <option>Nissan Sunny</option>
                                    <option>Mercedes V250</option>
                                    <option>Chevrolet Optra</option>
                                    <option>Citroen</option>
                                    <option>Chevrolet TFR</option>
                                    <option>Fiat  Van</option>
                                    <option>KYC x 3</option>
                                    <option>XMQ65 كينج لونج</option>
                                    <option>Chevrolet RT95</option>
                                    <option>Chevorlet N300</option>
                                    <option>IVECO</option>
                                    <option>Chevrolet NKR</option>
                                </select>
                            </li>
                            <li class="Displayliselect Displayfix">
                                <label>Year Model</label>
                                <input type="text" class="FilterSelect form-control" style="width:250px" id="YearModel" name="Parobj.YearModel" required>
                            </li>
                            <li class="Displayliselect Displayfix">
                                <label>Owned By</label>
                                <br>
                                <select name="Parobj.OwnedBy" id="OwnedBy" class="FilterSelect form-control" style="width:250px">
                                    <option value="NotFound">Choose</option>
                                    <option>Contact</option>
                                    <option>Al Tameer</option>
                                    <option>Sky</option>
                                    <option>TMT</option>
                                    <option>Cairo Leasing</option>
                                </select>
                            </li>
                            <li class="Displayliselect Displayfix">
                                <label>Insurance Company</label>
                                <br>
                                <select name="Parobj.InsuranceCompany" id="InsuranceCompany" class="FilterSelect form-control" style="width:250px">
                                    <option value="NotFound">Choose</option>
                                    <option>Misr Insurance</option>
                                    <option>ESIH</option>
                                    <option>MADA</option>
                                    <option>Sarwa</option>
                                    <option>Royal</option>
                                </select>
                            </li>
                            <li class="Displayliselect Displayfix">
                                <label>Certificate</label>
                                <input type="text" class="FilterSelect form-control" style="width:250px" id="Certificate" name="Parobj.Certificate" required>
                            </li>
                            <li class="Displayliselect Displayfix">
                                <label>Insurance Value </label>
                                <input type="number" class="FilterSelect form-control" style="width:250px" id="InsuranceValue" name="Parobj.InsuranceValue" required>
                            </li>
                            <li class="Displayliselect Displayfix">
                                <label>Installment Value </label>
                                <input type="number" class="FilterSelect form-control" style="width:250px" id="InstallmentValue" name="Parobj.InstallmentValue" required>
                            </li>
                            <li class="Displayliselect Displayfix">
                <label>Card Photo</label>
                <input type="file"  class="FilterSelect form-control" style="width:250px" name="CardPhoto" >
            </li>
                            <li class="Displayliselect Displayfix">
                <label>Car Number</label>
                                <div class ="input-container">
                                    <input type="text" id="num-typed-input" class="FilterSelect form-control" style="width:125px;font-weight:bold" name="Parobj.CarNumberDigits" placeholder="3-4 nums" required>
                                    <input type="text" id="char-typed-input" class="FilterSelect form-control" style="width:125px;font-weight:bold"  name="Parobj.CarNumberLetters" placeholder="3 letters" required>
@*                                     <input type="text" id="char-typed-input" placeholder="Type here...">
 *@
                                </div>
                            </li>
                            <li class="Displayliselect Displayfix">
                                <label>Chassis Number</label>
                                <input type="text" class="FilterSelect form-control" style="width:250px" id="ChassisNumber" name="Parobj.ChassisNumber" required>
                            </li>
                            <li class="Displayliselect Displayfix" style="width:120px;">
                                <label>Motor Number</label>
                                <input type="text" class="FilterSelect form-control" style="width:250px" id="MotorNumber" name="Parobj.MotorNumber" required>
                            </li>
                            <div class="lines"></div>
                            <li class="Displayliselect">
                                <label>Remarks</label>
                                <input type="text" class="FilterSelect form-control" style="width:250px" id="Remarks" name="Parobj.Remarks" required>
                            </li>
            <br />
        </ul>
        <button type="submit" id="Addbtn" class="btn btn-primary">Create Driver</button>
    </form>
                </div>
            </div>
        </div>
    </div>
     <div id="salesReportTableWrapper" style="margin:1%">
        @if (ViewBag.Data != null)
        {
            <table id="example" class="table" style="width:95%;">
                <thead>
                    <tr style="background-color: #a60f0f;color: #ffffffc7;font-size:13px">
                        <th>#</th> <!-- Row number column -->
                        <th style="display:none">Id</th>
                        <th>license StartDate <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                        <th>license EndDate <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                        <th>Driver  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                        <th>Car Number <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                        <th>Card Photo  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                        <th>Chassis  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                        <th>Motor  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                        <th>RemainingDays  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                        <th>Action</th>
                     </tr>
                </thead>
                <tbody>
                    @for (int i = 0; i < ViewBag.Data.Count; i++)
                    {
                        var dr = ViewBag.Data[i];
                        <tr >
                            <td></td> <!-- Empty cell for row number -->
                            <td style="display:none">@dr.ItemName</td>
                            <td>@dr.SupplierName</td>
                            <td>@dr.Dmanager</td>
                            <td>@dr.Username</td>
                            <td>@dr.DpName</td>
                            <td>
                                <img src="@dr.Fmanager" alt="Driver Photo" width="200" />
                            </td>
                            <td>@dr.Company</td>
                            <td>@dr.Employee</td>
                            <td> <span style="padding:7px; font-size: 29px;font-weight:bold;@(dr.ByDay <= 30 ? "background-color: red;" : "")">@dr.ByDay</span> </td>
                            <td>
                                <span class="btn btn-primary" style="font-weight:bold;margin: 7px;" onclick="confirmDelete('@Url.Action("DeleteDriver", "Driveres", new { id = @dr.ItemName })')" style="cursor:pointer;">Delete</span>
                                <a class="btn btn-primary unapprove" style="font-weight:bold;margin: 7px;" href="@Url.Action("EditDriver", "Driveres", new { @id = @dr.ItemName })">Edit</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
    <script src="/js/jquery-3.5.1.min.js"></script>
    <script src="/js/jquery.dataTables.min.js"></script>
    <script src="/js/dataTables.buttons.min.js"></script>
    <script src="/js/jszip.min.js"></script>
    <script src="/js/buttons.html5.min.js"></script>
    <script src="/js/pdfmake.min.js"></script>
    <script src="/js/vfs_fonts.js"></script>
    <script>
        function confirmDelete(url) {
            if (confirm('Are you sure you want to delete this driver?')) {
                // Programmatically submit the form to the specified URL
                window.location.href = url;
            }
        }
        var table = $('#example').DataTable({
            pageLength: -1,  // Set default page length to "All"
            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],  // Page length options
            dom: '<"custom-toolbar"lfB>rtip',  // Custom placement of elements
            buttons: [
                {
                    extend: 'excelHtml5',
                    text: 'Export To Excel',
                    className: 'export-excel-button'
                }
            ],
            language: {
                info: "Showing _START_ to _END_ of _TOTAL_ entries",  // Custom info text
                infoEmpty: "No records available",
                infoFiltered: "(filtered from _MAX_ total entries)"
            },
            order: [[9, 'asc']],  // Set initial sorting by the first data column (after row numbers)
            columnDefs: [
                { targets: 0, orderable: false }  // Disable sorting on the row number column
            ],
            drawCallback: function (settings) {
                var api = this.api();
                var start = api.page.info().start;
                api.column(0, { order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = start + i + 1;  // Set the row number
                });
            },
            initComplete: function () {
                // Ensure the info text and length menu are aligned beside the button
                $('.dataTables_length').detach().prependTo('.custom-toolbar');
                $('.dataTables_info').detach().appendTo('.custom-toolbar');
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const inputField = document.getElementById('char-typed-input');
            const numinputField = document.getElementById('num-typed-input');

            inputField.addEventListener('input', function () {
                // First, remove existing spaces to accurately count characters
                let cleanedValue = this.value.replace(/\s/g, '');

                // Check if the cleaned value length is greater than 3

                if (cleanedValue.length > 3) {
                    Swal.fire({
                        title: "You've reached the maximum allowed characters.",
                        icon: "question",
                        timer: 4500
                    });
                }
                if (!/^[a-zA-Z\u0590-\u05FF\u0600-\u06FF]+$/g.test(cleanedValue)) {
                    Swal.fire({
                            title: "Input contains invalid characters.",
                            text: "Please enter only letters.",
                            icon: "warning",
                            timer: 4500
                        });
                    // Slice the cleaned value to the first 3 characters
                    cleanedValue = cleanedValue.slice(0, 3);
                }

                // Now, add spaces between characters for display
                let spacedValue = cleanedValue.split('').join(' ');
                this.value = spacedValue; // Update the input value without trimming
            });
            numinputField.addEventListener('input', function () {
                // First, remove existing spaces to accurately count characters
                let cleanedValue = this.value.replace(/\s/g, '');
                if (/^[a-zA-Z\u0590-\u05FF\u0600-\u06FF]+$/g.test(cleanedValue)) {
                    Swal.fire({
                        title: "Input contains invalid Numbers.",
                        text: "Please enter only Numbers.",
                        icon: "warning",
                        timer: 4500
                    });
                }
                // Check if the cleaned value length is greater than 3
                if (cleanedValue.length >4) {
                    Swal.fire({
                        title: "You've reached the maximum allowed Numbers.",
                        icon: "question",
                        timer: 4500
                    });                    // Slice the cleaned value to the first 3 characters
                    cleanedValue = cleanedValue.slice(0, 4);
                }
            });
        });
    </script>
    <script>
        var warningMessage = '@ViewBag.Re';
        var Delete = '@ViewBag.Del';
        var Edit = '@ViewBag.Edit';
        console.log(warningMessage);
        if (warningMessage === "done") {
            window.addEventListener('load', function () {
                Swal.fire({
                    title: "Good, You Create New License Successfully",
                    icon: "success",
                    timer: 6500
                });
            });
        }
        if (Delete === "Delete") {
            window.addEventListener('load', function () {
                Swal.fire({
                    title: "Good, You Delete License Successfully",
                    icon: "success",
                    timer: 6500
                });
            });
        }
        if (Edit === "Edit") {
            window.addEventListener('load', function () {
                Swal.fire({
                    title: "Good, You Update License Successfully",
                    icon: "success",
                    timer: 6500
                });
            });
        }
    </script>
    <script>
        let Addbtn = document.getElementById('Addbtn');
        const inputField = document.getElementById('char-typed-input');
        const DriverName = document.getElementById('DriverName');
        // let UnApprovebtn = document.getElementById('UnApprovebtn');
        // let ManagerReply = document.getElementById('ManagerReply'); // Reference to the hidden input
        // let Message = document.getElementById('Message'); // Reference to the hidden input
        // // Event listener for the Display button
        Addbtn.addEventListener('click', function (event) {
            event.preventDefault();
            var startDateInput = document.getElementById('startDate');
            var endDateInput = document.getElementById('endDate');
             const numinputField = document.getElementById('num-typed-input');
            let cleanedValuenum = numinputField.value.replace(/\s/g, '');
            if (/^[a-zA-Z\u0590-\u05FF\u0600-\u06FF]+$/g.test(cleanedValuenum)) {
                // Swal.fire({
                //     title: "Input contains invalid Numbers.",
                //     text: "Please enter only Numbers.",
                //     icon: "warning",
                //     timer: 4500
                // });
                // return;
                alert("hi");
            }
            // Check if the cleaned value length is greater than 3
            if (cleanedValuenum.length > 4) {
                Swal.fire({
                    title: "You've reached the maximum allowed Numbers.",
                    icon: "question",
                    timer: 4500
                });
                return;
                // Slice the cleaned value to the first 3 characters
            }
            if (!numinputField.value || !inputField.value) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "Please fill out CarNumber field.",
                    icon: "info",
                    timer: 4500
                });
                return true;
            }
            if (!startDateInput.value || !endDateInput.value) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "Please fill out both date fields.",
                    icon: "info",
                    timer: 4500
                });
                return true;
            }
            if (!DriverName.value) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "Please fill out DriverName field.",
                    icon: "info",
                    timer: 4500
                });
                return true;
            } // First, remove existing spaces to accurately count characters
            let cleanedValue = inputField.value.replace(/\s/g, '');
                // Check if the cleaned value length is greater than 3
                if (cleanedValue.length > 3) {
                    Swal.fire({
                        title: "You've reached the maximum allowed characters.",
                        icon: "question",
                        timer: 4500
                    });
                    return;
                }
                if (!/^[a-zA-Z\u0590-\u05FF\u0600-\u06FF]+$/g.test(cleanedValue)) {
                    Swal.fire({
                        title: "Input contains invalid characters.",
                        text: "Please enter only letters.",
                        icon: "warning",
                        timer: 4500
                    });
                return;
                    // Slice the cleaned value to the first 3 characters
                }
            // ManagerReply.value = 1; // Set the value to 1 for Display action
            // exportButton.disabled = true;
            submitExportForm(); // Submit the export form
        });
        function submitExportForm() {
            InsertForm.submit(); // Submit the export form
            // Set up an interval to check export status periodically
        }
    </script>
</body>
</html>





