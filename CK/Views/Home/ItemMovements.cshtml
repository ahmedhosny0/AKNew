@model CK.Models.SalesParameters;
@addTagHelper*, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!Doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" type="text/css" href="/css/datatables.min.css" />
    <link rel="stylesheet" type="text/css" href="/js/datatables.min.css" />
    <title>Circle K</title>
    <script src="/js/sweetalert2@11"></script>
    <script src="/css/sweetalert2@11.js"></script>
    <script>
        var preventBack = @Html.Raw(Json.Serialize(ViewData["PreventBack"] ?? false));

        if (preventBack) {
            window.history.pushState(null, "", location.href);
            window.onpopstate = function () {
                window.history.pushState(null, "", location.href);
            };
        }
    </script>
    <style>
        .main-footer {
            position: relative !important;
        }
    </style>
</head>


<body class="hold-transition @* sidebar-mini layout-fixed *@">
    <div class="preloader">
        <div class="sk-spinner sk-spinner-wave">
            <div class="sk-rect1"></div>
            <div class="sk-rect2"></div>
            <div class="sk-rect3"></div>
            <div class="sk-rect4"></div>
            <div class="sk-rect5"></div>
        </div>
    </div>
    <div class="wrapper" style="margin-left:0;">
        <div class="content-wrapper" style="margin-left:0;">
            <div class="container-fluid">
                <div class="row mb-2">

                    <div class="col-sm-6">
                    </div>
                </div>
            </div>
            <form id="exportForm" asp-controller="Home" asp-action="ItemMovements" method="post">
                <section class="content">
                    <div class="container-fluid">
                        <div class="row">
                            <section class="col-lg-7 ">
                                <h5 style="text-align:center">تم اضافة الرصيد الافتتاحي للصنف في التقرير</h5>
                                <div class="row" style="display: block;">
                                    <div class="col-md-3">
                                        <ul>
                                            <li class="Displayliselect">
                                                <label>Item Barcode:</label>
                                                <br>
                                                <input type="text" name="Parobj.ItemLookupCodeTxt" class="FilterSelect form-control" id="ItemLookupCode" />
                                            </li>
                                            <br />
                                            <li class="Displayliselect">
                                                <label>Date From:</label>
                                                <br>
                                                <input type="date" id="startDate" name="Parobj.startDate" class="form-control" style="width:200px;display:inline-block" required>
                                            </li>
                                            <li class="Displayliselect">
                                                <label>Date To:</label>
                                                <br>
                                                <input type="date" id="endDate" name="Parobj.endDate" class="form-control" style="width:200px;display:inline-block" required>
                                            </li>
                                        </ul>

                                        <br>
                                    </div>
                                </div>
                            </section>
                            <input type="hidden" id="actionValue" name="Parobj.actionValue">
                        </div>Elapsed Time :
                        <div id="stopwatch" style="display:inline-block">00:00:00</div><br />
                        <button type="submit" id="exportButton" class="btn btn-primary">Export To Excel</button>
                        <button type="submit" id="DisplayButton" class="btn btn-primary Display">Display Report</button>
                    </div>
                </section>
            </form>
            <div id="salesReportTableWrapper" style="margin:1%">
                <script src="/js/sweetalert2@11"></script>
                @if (ViewBag.Data != null)
                {
                    <script>
                        Swal.fire({
                            title: "Good, You Display Report Successfully",
                            icon: "success",
                            timer: 5500
                        });
                    </script>
                    <ul>
                        <li class="Displayliselect" style="float: right;margin-right: 5%; text-align: center;">
                            <label>Current Balance (QTY)</label>
                            <br>
                            <input type="button" class="form-control" style="font-weight:bold;width:200px;display:inline-block" value="@ViewBag.TotalQty">
                        </li>
                    </ul>
                    <table id="example" class="table" style="width:1600px">
                        <thead>
                            <tr style="background-color: #a60f0f;color: #ffffffc7; font-size:10px">
                                <th>#</th>
                                <th>Reference  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Date  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Id  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Status  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Store  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Transfer/Purch/Sale To <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Category  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Barcode  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Description  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Purchase Price  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Opening Balance  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Sales Order  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Transfer  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Purchase  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Counting  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                <th>Current Balance  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < ViewBag.Data.Count; i++)
                            {
                                var dr = ViewBag.Data[i];
                                <tr>
                                    <td></td>
                                    <td>@dr.Reference</td>
                                    <td>@dr.ConvDate</td>
                                    <td>@dr.Dmanager</td>
                                    <td>@dr.StoreFranchise</td>
                                    <td>@dr.Fmanager</td>
                                    <td>@dr.SupplierName</td>
                                    <td>@dr.DpName</td>
                                    <td>@dr.ItemLookupCode</td>
                                    <td>@dr.ItemName</td>
                                    <td>@dr.PurchPrice</td>
                                    <td>@dr.OpeningBalance</td>
                                    <td>@dr.Sales</td>
                                    <td>@dr.Transfer</td>
                                    <td>@dr.Purchase</td>
                                    <td>@dr.Counting</td>
                                    <td>@dr.CurrentBalance</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

        </div>
    </div>

    <script src="/js/jquery-3.5.1.min.js"></script>
    <script src="/js/jquery.dataTables.min.js"></script>
    <script src="/js/dataTables.buttons.min.js"></script>
    <script src="/js/jszip.min.js"></script>
    <script src="/js/buttons.html5.min.js"></script>
    <script src="/js/pdfmake.min.js"></script>
    <script src="/js/vfs_fonts.js"></script>
    <script>
        var table = $('#example').DataTable({
            pageLength: 50,  // Set default page length to "All"
            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, "All"]],  // Page length options
            dom: '<"custom-toolbar"lfB>rtip',  // Custom placement of elements
            buttons: [
                {
                    extend: 'excelHtml5',
                    text: 'Export To Excel',
                    className: 'export-excel-button'
                }
            ],
            language: {
                info: "Showing _START_ to _END_ of _TOTAL_ entries",  // Custom info text
                infoEmpty: "No records available",
                infoFiltered: "(filtered from _MAX_ total entries)"
            },
            order: [[1, 'asc'], [2, 'asc']], // Set initial sorting by the first data column (after row numbers)
            columnDefs: [
                { targets: 0, orderable: false }  // Disable sorting on the row number column
            ],
            drawCallback: function (settings) {
                var api = this.api();
                var start = api.page.info().start;
                api.column(0, { order: 'applied' }).nodes().each(function (cell, i) {
                    cell.innerHTML = start + i + 1;  // Set the row number
                });
            },
            initComplete: function () {
                // Ensure the info text and length menu are aligned beside the button
                $('.dataTables_length').detach().prependTo('.custom-toolbar');
                $('.dataTables_info').detach().appendTo('.custom-toolbar');
            }
        });
    </script>
    <script>
        const Barcode = localStorage.getItem('ItemLookupCode');
        const savedDate = localStorage.getItem('endDate');
        const savedstartDate = localStorage.getItem('startDate');
        if (savedDate) {
            // Set the saved date as the value of the endDate input field
            document.getElementById('endDate').value = savedDate;
        } if (savedstartDate) {
            // Set the saved date as the value of the endDate input field
            document.getElementById('startDate').value = savedstartDate;
        }
        if (Barcode) {
            // Set the saved date as the value of the endDate input field
            document.getElementById('ItemLookupCode').value = Barcode;
        }
    </script>
    <script>
        let startTime, elapsed = 0;
        let stopwatchDisplay = document.getElementById('stopwatch');
        let exportForm = document.getElementById('exportForm');
        let intervalId = null;

        function startStopwatch() {
            console.log('Starting stopwatch...');
            startTime = Date.now();
            intervalId = setInterval(() => {
                elapsed = Date.now() - startTime;
                stopwatchDisplay.textContent = formatElapsedTime(elapsed);
            }, 100);
            console.log('Stopwatch started with interval ID:', intervalId);
        }

        function stopStopwatch() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        }

        function formatElapsedTime(elapsed) {
            let hours = Math.floor(elapsed / 3600000);
            let minutes = Math.floor((elapsed % 3600000) / 60000);
            let seconds = ((elapsed % 60000) / 1000).toFixed(0);
            return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
        }

        function pad(number) {
            return number < 10 ? '0' + number : number;
        }

        function isYesterday(date) {
            var today = new Date();
            var yesterday = new Date(today);
            yesterday.setDate(today.getDate() - 1);
            return date.getDate() === yesterday.getDate() &&
                date.getMonth() === yesterday.getMonth() &&
                date.getFullYear() === yesterday.getFullYear() &&
                today.getHours() < 16; // 16 is the 4th hour of the day
            ;
        }

        //      || (startDate.getDay() === 6 && dayOfWeek === 6)
        // || (endDate.getDay() === 5 && dayOfWeek === 5 && endDate=getDate()) || (endDate.getDay() === 6 && dayOfWeek === 6))
        function checkDates() {
            var startDateInput = document.getElementById('startDate');
            var endDateInput = document.getElementById('endDate');

            var startDate = new Date(startDateInput.value);
            var endDate = new Date(endDateInput.value);
            var today = new Date();
            var dayOfWeek = today.getDay();
            console.log(startDate.getDate());
            console.log(endDate.getDate()); console.log(startDate.getMonth());
            var username = '@ViewBag.Username';
            if (!startDateInput.value || !endDateInput.value) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "Please fill out both date fields.",
                    icon: "question",
                    timer: 4500
                });
                return true;
            }
            // if ((startDate.getDate() >= 27 || endDate.getDate() >= 27) && startDate.getMonth() === 5 && endDate.getMonth() === 5) {
            //     alert('  لا يمكن إظهار مبيعات في أيام الاجازه ستفتج يوم الاثنين بعد الساعه ٤- ظهور المبيعات مغلق ');
            //     return true;
            // } if ((startDate.getDate() >= 1 || endDate.getDate() >= 1) && startDate.getMonth() === 6 && endDate.getMonth() === 6) {
            //     alert('  لا يمكن إظهار مبيعات في أيام الاجازه ستفتح يوم الاثنين بعد الساعه ٤--- ظهور المبيعات مغلق ');
            //     return true;
            // }
            return false; // Return false if neither date is yesterday
        }
        let DisplayButton = document.getElementById('DisplayButton');
        let exportButton = document.getElementById('exportButton');
        let actionInput = document.getElementById('actionValue'); // Reference to the hidden input
        DisplayButton.addEventListener('click', function (event) {
            event.preventDefault();
            if (checkDates()) {
                // If either date is yesterday, do not continue with the rest of the code
                return;
            }
            let timerInterval;
            Swal.fire({
                title: "Dear ," + username + " Wait Report ",
                html: "Wait Report will be shown <b></b> milliseconds.",
                timer: 1000000,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading();
                    const timer = Swal.getPopup().querySelector("b");
                    timerInterval = setInterval(() => {
                        timer.textContent = `${Swal.getTimerLeft()}`;
                    }, 100);
                },
                willClose: () => {
                    clearInterval(timerInterval);
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log("I was closed by the timer");
                }
            });
            exportButton.disabled = true;
            DisplayButton.disabled = true;
            startStopwatch();
            actionInput.value = 1; // Set the value to 1 for Display action
            submitExportForm(); // Submit the export form
        });
        exportButton.addEventListener('click', function (event) {
            event.preventDefault();
            if (checkDates()) {
                // If either date is yesterday, do not continue with the rest of the code
                return;
            }
            let timerInterval;
            Swal.fire({
                title: "Dear ," + username + " Wait Report ",
                html: "Wait Report will be shown <b></b> milliseconds.",
                timer: 1000000,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading();
                    const timer = Swal.getPopup().querySelector("b");
                    timerInterval = setInterval(() => {
                        timer.textContent = `${Swal.getTimerLeft()}`;
                    }, 100);
                },
                willClose: () => {
                    clearInterval(timerInterval);
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log("I was closed by the timer");
                }
            });
            exportButton.disabled = true;
            DisplayButton.disabled = true;
            startStopwatch();
            actionInput.value = 2; // Set the value to 1 for Display action
            submitExportForm(); // Submit the export form
        });
        // Event listener for the cancel export button
        // Assuming cancelExportButton is defined elsewhere in your script
        cancelExportButton.addEventListener('click', function (event) {
            event.preventDefault();
            cancelExport(); // Call the cancelExport function
        });

        // Function to handle export submission
        function submitExportForm() {
            var endDateValue = document.getElementById('endDate').value;
            var startDateValue = document.getElementById('startDate').value;
            var Barcode = document.getElementById('ItemLookupCode').value;
            // Save the endDate value to local storage
            localStorage.setItem('endDate', endDateValue);
            localStorage.setItem('startDate', startDateValue);
            localStorage.setItem('ItemLookupCode', Barcode);
            // Clear the input field after saving
            document.getElementById('endDate').value = endDateValue;
            document.getElementById('startDate').value = startDateValue;
            document.getElementById('ItemLookupCode').value = Barcode;
            exportForm.submit(); // Submit the export form
            checkExportStatus(); // Check export status immediately after submission

            // Set up an interval to check export status periodically
            checkStatusInterval = setInterval(checkExportStatus, 1000);
        }

        function checkExportStatus() {
            $.ajax({
                url: '/Home/CheckExportStatus',
                type: 'GET',
                success: function (status) {
                    console.log(status);
                    if (status === 'complete') {
                        stopStopwatch();
                        exportButton.disabled = false;
                        DisplayButton.disabled = false;
                        Swal.fire({
                            title: "You Export Report Successfully",
                            icon: "success",
                            timer: 5500
                        });
                    } else {
                        setTimeout(checkExportStatus, 1000);
                    }
                },
                error: function () {
                    exportButton.disabled = false;
                    DisplayButton.disabled = false;
                }
            });
        }
    </script>
</body>
</html>
