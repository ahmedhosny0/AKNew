@model CK.Models.SalesParameters;
@addTagHelper*, Microsoft.AspNetCore.Mvc.TagHelpers
@{
    var role = ViewBag.Role;
    var user = ViewBag.Username;

    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!Doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <title>Circle K</title>
    <script src="/js/sweetalert2@11"></script>
    <script src="/css/sweetalert2@11.js"></script>
    <script>
        var preventBack = @Html.Raw(Json.Serialize(ViewData["PreventBack"] ?? false));

        if (preventBack) {
            window.history.pushState(null, "", location.href);
            window.onpopstate = function () {
                window.history.pushState(null, "", location.href);
            };
        }
    </script>
    <style>
        .main-footer
        {
            position:relative !important;
        }
    </style>
</head>


<body class="hold-transition @* sidebar-mini layout-fixed *@">
    @*     @ViewBag.Username
    *@
    <div class="preloader">
        <div class="sk-spinner sk-spinner-wave">
            <div class="sk-rect1"></div>
            <div class="sk-rect2"></div>
            <div class="sk-rect3"></div>
            <div class="sk-rect4"></div>
            <div class="sk-rect5"></div>
        </div>
    </div>
    <div class="wrapper" style="margin-left:0;">
        <div class="content-wrapper" style="margin-left:0;">
            <div class="container-fluid">
                <div class="row mb-2">

                    <div class="col-sm-6">
                    </div>
                </div>
            </div>
            <form id="exportForm" asp-controller="Tender" asp-action="TenderFromBranch" method="post">
                <section class="content">
                    <div class="container-fluid">
                        <div class="row">
                            <section class="col-lg-7 ">
                                <select class="FilterSelect form-control" name="Parobj.Store" asp-items="@(new SelectList(ViewBag.VBStore,"Store","Name"))" style="display: none;">
                                    <option value="0">All Branches</option>
                                </select>

                                <input type="hidden" id="selectedStores" name="Parobj.Store" value="Store" />
                                <div class="row" style="display: block;">
                                    <div class="col-md-3">
                                        <div class="card card-primary collapsed-card" style="width:1500px" id="filterCard">
                                            <div class="card-header card-title" data-card-widget="collapse" style="color: #034C96;border:1px solid #0000004d;background-color:#0000000f">
                                                <h3 class="card-title">Filtering</h3>
                                                <div class="card-tools">
                                                </div>
                                            </div>
                                            <div class="card-body" style="padding: 20px;transition:max-height 5s ease-in-out;">
                                                <ul>
                                                    <li class="Displayliselect">
                                                        <label>Date From:</label>
                                                        <br>
                                                        <input type="date" id="startDate" name="Parobj.startDate" class="form-control" style="width:200px;display:inline-block" required>
                                                    </li>
                                                    <li class="Displayliselect">
                                                        <label>Date To:</label>
                                                        <br>
                                                        <input type="date" id="endDate" name="Parobj.endDate" class="form-control" style="width:200px;display:inline-block" required>
                                                    </li>
                                                </ul>


                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-3" style="display: block;float:none">
                                        <div class="card card-primary collapsed-card" style="width:1500px" id="displayFieldsCard">
                                            <div class="card-header card-title" data-card-widget="collapse" style="color: #034C96;border:1px solid #0000004d;background-color:#0000000f">
                                                <h3 class="card-title">Display Fields</h3>
                                                <div class="card-tools">
                                                </div>
                                            </div>
                                            <div class="card-body" style="padding: 20px;">
                                                <ul style="list-style: none; min-width:1500px">
                                                    <li class="Displayli" >
                                                        <input type="checkbox" name="Parobj.Vbatch" id="Vbatch" value="true">
                                                        <label for="Vbatch">By Shift</label>
                                                    </li>
                                                    <li class="Displayli">
                                                        <input type="checkbox" name="Parobj.VPerDay" id="VPerDay" value="true">
                                                        <label for="VPerDay">Day</label>
                                                    </li>
                                                   @*  <li class="Displayli">
                                                        <input type="checkbox" name="Parobj.VPaidtype" id="VPaidtype" value="true">
                                                        <label for="VPaidtype">Tender Type</label>
                                                    </li>
                                                    <li class="Displayli">
                                                        <input type="checkbox" name="Parobj.VTotalSales" id="VTotalSales" value="true">
                                                        <label for="VTotalSales">Total Sales</label>
                                                    </li> *@
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </section>
                            @*                                 <img id="loader-gif" src="/images/loading-23.gif" alt="" />
                            *@@*                                 <img id="loader-gif2" src="/images/200w.gif" alt="" />
                            *@
                            <input type="hidden" id="actionValue" name="Parobj.actionValue">
                        </div>Elapsed Time :
                        <div id="stopwatch" style="display:inline-block">00:00:00</div><br />
                        <button type="submit" id="exportButton" class="btn btn-primary">Export To Excel</button>
                        <button type="submit" id="DisplayButton" class="btn btn-primary Display">Display Report</button>
                        <input type="hidden" id="CompareStart" value="@ViewBag.Start">
                        <input type="hidden" id="CompareEnd" value="@ViewBag.End">
                    </div>
                </section>
            </form>
            <div id="salesReportTableWrapper" style="margin: 0 19%;">
                <script src="/js/sweetalert2@11"></script>
                @if (ViewBag.Data != null)
                {
                    <script>
                        Swal.fire({
                            title: "Good, You Display Report Successfully",
                            icon: "success",
                            timer: 5500
                        });
                    </script>
                    <ul>
                        <li class="Displayliselect" style="float: right;margin-right: 5%; text-align: center;">
                            <label>Total Sales</label>
                            <br>
                            <input type="button" class="form-control" style="font-weight:bold; width:200px;display:inline-block" value="@ViewBag.Total">
                        </li>
                    </ul>
                    <table id="example" class="table" style="width:93%;">
                        <thead>
                            <tr style="background-color: #a60f0f;color: #ffffffc7;">
                                @if (ViewBag.batch !=null)
                                {
                                    <th>Batch Id  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                    <th>Terminal Id  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                    <th>Start Date  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                    <th>Closed Date  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                   <th>Total Sales  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                }
                                else
                                {
                                    @if (ViewBag.Day != null)
                                    {
                                        <th>Day <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                    }
                                    <th>Tender Type  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                    <th>Total Sales  <i style="font-size:16px" class="fa">&#xf0dc;</i></th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < ViewBag.Data.Count; i++)
                            {
                                var dr = ViewBag.Data[i];
                                <tr>
                                    @if (ViewBag.batch != null)
                                    {
                                        <td>@dr.Dmanager</td>
                                        <td>@dr.Fmanager</td>
                                        <td>@dr.DpName</td>
                                        <td>@dr.Username</td>
                                        <td>@dr.StoreFranchise</td>
                                    }
                                    else
                                    {
                                        @if (dr.ItemName != null)
                                        {
                                            <td>@dr.ItemName</td>
                                        }
                                        <td>@dr.StoreName</td>
                                        <td>@dr.StoreFranchise</td>
                                    }
                                   
                                </tr>
                            }
                        </tbody>
                    </table>
                }
            </div>

        </div>
    </div>
    <script src="/js/jquery-3.5.1.min.js"></script>
    <script src="/js/jquery.dataTables.min.js"></script>
    <script src="/js/dataTables.buttons.min.js"></script>
    <script src="/js/jszip.min.js"></script>
    <script src="/js/buttons.html5.min.js"></script>
    <script src="/js/pdfmake.min.js"></script>
    <script src="/js/vfs_fonts.js"></script>
    <script>
        var table = $('#example').DataTable({
            pageLength: 20,
            lengthChange: true,
            dom: 'Bfrtip', // This keeps the buttons in the DataTables control
            buttons: [
                {
                    extend: 'excelHtml5',
                    text: 'Export To Excel',
                    className: 'export-excel-button' // Add a class for easier selection later
                }
            ]
        });

        // After initializing the table, manually move the Excel export button to the top
        $('.export-excel-button').detach().prependTo($('#example_wrapper'));

        // Initialize the table again after moving the button
        table.buttons().container().appendTo('#example_wrapper');
    </script>
    <script>
        const savedDate = localStorage.getItem('endDate');
        const savedstartDate = localStorage.getItem('startDate');
        const stt = localStorage.getItem('tt');

        if (savedDate) {
            // Set the saved date as the value of the endDate input field
            document.getElementById('endDate').value = savedDate;
        } if (savedstartDate) {
            // Set the saved date as the value of the endDate input field
            document.getElementById('startDate').value = savedstartDate;
        } if (stt) {
            // Set the saved date as the value of the endDate input field
            document.getElementById('tt').value = stt;
        }
        function saveSelectListState(selectId, selectedOption) {
            localStorage.setItem(selectId, selectedOption);
        }
        function restoreSelectListState(selectElementId) {
            const savedOption = localStorage.getItem(selectElementId);
            if (savedOption) {
                // Ensure the select element exists and then set its value
                const selectElement = document.getElementById(selectElementId);
                if (selectElement) {
                    selectElement.value = savedOption;
                } else {
                    console.error(`Element with ID ${selectElementId} not found.`);
                }
            } else {
                console.info(`No saved option found for ${selectElementId}.`);
            }
        }
        function saveCheckboxState(checkboxId, isChecked) {
            localStorage.setItem(checkboxId, isChecked ? 'true' : 'false');
        }

        function restoreCheckboxState(checkboxId) {
            const savedState = localStorage.getItem(checkboxId);
            if (savedState === 'true') {
                document.getElementById(checkboxId).checked = true;
            } else if (savedState === 'false') {
                document.getElementById(checkboxId).checked = false;
            }
        }

        // Restore the checkbox state when the page loads
        restoreCheckboxState('VPerDay');
        restoreCheckboxState('Vbatch');
        restoreCheckboxState('VTransactionNumber');
        restoreCheckboxState('VStoreId');
        restoreCheckboxState('VStoreName');
        restoreCheckboxState('VTotalSales');
        restoreCheckboxState('VPaidtype');
        restoreSelectListState('departmentSelect');
        restoreSelectListState('store');

        // Event listener for the checkbox change event
        document.getElementById('VPerDay').addEventListener('change', function () {
            saveCheckboxState('VPerDay', this.checked);
        }); document.getElementById('Vbatch').addEventListener('change', function () {
            saveCheckboxState('Vbatch', this.checked);
        });
        document.getElementById('VTransactionNumber').addEventListener('change', function () {
            saveCheckboxState('VTransactionNumber', this.checked);
        });
        document.getElementById('VStoreId').addEventListener('change', function () {
            saveCheckboxState('VStoreId', this.checked);
        });
        document.getElementById('VStoreName').addEventListener('change', function () {
            saveCheckboxState('VStoreName', this.checked);
        });
        document.getElementById('VTotalSales').addEventListener('change', function () {
            saveCheckboxState('VTotalSales', this.checked);
        });
        document.getElementById('VPaidtype').addEventListener('change', function () {
            saveCheckboxState('VPaidtype', this.checked);
        });
        </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Get the Batch checkbox
            var batchCheckbox = document.getElementById('Vbatch');

            // Function to disable all other checkboxes except TMT
            function disableOtherCheckboxesExceptTMT() {
                var checkboxes = document.querySelectorAll('input[type="checkbox"]');
                checkboxes.forEach(function (checkbox) {
                    if (checkbox.id !== 'Vbatch' && checkbox.id !== 'TMT') {
                        checkbox.disabled = batchCheckbox.checked;
                    }
                });
            }

            // Function to enable all other checkboxes except TMT
            function enableOtherCheckboxesExceptTMT() {
                var checkboxes = document.querySelectorAll('input[type="checkbox"]');
                var StoreId = '@ViewBag.StoreIddynamic';
                checkboxes.forEach(function (checkbox) {
                    if (checkbox.id !== 'Vbatch' && checkbox.id !== 'TMT') {
                        checkbox.disabled = false;
                    }
                    else if (StoreId === 'RMS')
                    {
                        checkbox.disabled = true;
                    }
                });
            }

            // Function to update the state of the Batch checkbox based on other checkboxes
            function updateBatchCheckboxState() {
                // Disable all other checkboxes except TMT if Batch is checked
                // Otherwise, enable them
                if (batchCheckbox.checked) {
                    disableOtherCheckboxesExceptTMT();
                } else {
                    enableOtherCheckboxesExceptTMT();
                }
            }

            // Add event listener to the Batch checkbox
            batchCheckbox.addEventListener('change', function () {
                updateBatchCheckboxState();
            });

            // Initially update the state of the Batch checkbox
            updateBatchCheckboxState();
        });
    </script>
    <script>
        let startTime, elapsed = 0;
        let stopwatchDisplay = document.getElementById('stopwatch');
        let exportForm = document.getElementById('exportForm');
        let intervalId = null;

        function startStopwatch() {
            console.log('Starting stopwatch...');
            startTime = Date.now();
            intervalId = setInterval(() => {
                elapsed = Date.now() - startTime;
                stopwatchDisplay.textContent = formatElapsedTime(elapsed);
            }, 100);
            console.log('Stopwatch started with interval ID:', intervalId);
        }

        function stopStopwatch() {
            if (intervalId) {
                clearInterval(intervalId);
                intervalId = null;
            }
        }

        function formatElapsedTime(elapsed) {
            let hours = Math.floor(elapsed / 3600000);
            let minutes = Math.floor((elapsed % 3600000) / 60000);
            let seconds = ((elapsed % 60000) / 1000).toFixed(0);
            return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
        }

        function pad(number) {
            return number < 10 ? '0' + number : number;
        }

        function isYesterday(date) {
            var today = new Date();
            var yesterday = new Date(today);
            yesterday.setDate(today.getDate() - 1);
            return date.getDate() === yesterday.getDate() &&
                date.getMonth() === yesterday.getMonth() &&
                date.getFullYear() === yesterday.getFullYear() &&
                today.getHours() < 16; // 16 is the 4th hour of the day
            ;
        }
       
        //      || (startDate.getDay() === 6 && dayOfWeek === 6)
        // || (endDate.getDay() === 5 && dayOfWeek === 5 && endDate=getDate()) || (endDate.getDay() === 6 && dayOfWeek === 6))
        function checkDates() {
            var startDateInput = document.getElementById('startDate');
            var endDateInput = document.getElementById('endDate');
            var startDate = new Date(startDateInput.value);
            var endDate = new Date(endDateInput.value);
            var today = new Date();
            var dayOfWeek = today.getDay();
            console.log(startDate.getDate());
            console.log(endDate.getDate()); console.log(startDate.getMonth());
            var username = '@ViewBag.Username';
            var inputField = document.getElementById('CompareStart');
            var inputField2 = document.getElementById('CompareEnd');
            console.log(inputField);
            if (!startDateInput.value || !endDateInput.value) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "Please fill out both date fields.",
                    icon: "info",
                    timer: 4500
                });
                return true;
            }
            // Check if the input field exists
            // Get the current value of the input field
            var inputValue = inputField.value; // "30-09-2024 12:00:00 AM"
            var inputValue2 = inputField2.value;

            function parseDate(dateString) {
                var [datePart, timePart] = dateString.split(' ');
                var [day, month, year] = datePart.split('-');
                return new Date(`${year}-${month}-${day} ${timePart}`);
            }

            var dateObject = parseDate(inputValue);
            var dateObject2 = parseDate(inputValue2);

            if (!isNaN(dateObject.getTime()) && !isNaN(dateObject2.getTime())) {
                var year = dateObject.getFullYear();
                var month = (dateObject.getMonth() + 1).toString().padStart(2, '0');
                var day = dateObject.getDate().toString().padStart(2, '0');

                var year2 = dateObject2.getFullYear();
                var month2 = (dateObject2.getMonth() + 1).toString().padStart(2, '0');
                var day2 = dateObject2.getDate().toString().padStart(2, '0');

                var dateString = `${year}-${month}-${day}`;
                var dateString2 = `${year2}-${month2}-${day2}`;

                console.log("startDateInput value:", dateString);
                console.log("endDateInput value:", dateString2);
            } else {
                console.log("Invalid Date");
            }
            if ((startDateInput.value <= dateString && endDateInput.value >= dateString2)
                || (startDateInput.value === dateString2 || endDateInput.value === dateString)
                || (startDateInput.value <= dateString && endDateInput.value >= dateString)
                || (startDateInput.value >= dateString && startDateInput.value <= dateString2)
            ) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true;
            }
            // if ((startDate.getDate() >= 1 || endDate.getDate() >= 1) && startDate.getMonth() === 6 && endDate.getMonth() === 6) {
            //     alert('  لا يمكن إظهار مبيعات في أيام الاجازه ستفتح يوم الاثنين بعد الساعه ٤--- ظهور المبيعات مغلق ');
            //     return true;
            // }
            if ((endDate.getDate() === today.getDate() && endDate.getMonth() === today.getMonth() && endDate.getFullYear() === today.getFullYear()) || (startDate.getDate() === today.getDate() && startDate.getMonth() === today.getMonth() && startDate.getFullYear() === today.getFullYear())) {

                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات اليوم - يتم عرضها في اليوم التالي بعد الساعه 4 ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            // Check if today is Friday and startDate is Friday and today's date is the same as startDate
            if (dayOfWeek === 4 && (endDate.getDay() === 4) &&
                (endDate.getDate() === today.getDate())) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 4 && (startDate.getDay() === 4) &&
                (startDate.getDate() === today.getDate())) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 5 && (startDate.getDay() === 5 || startDate.getDay() === 4) &&
                (startDate.getDate() === today.getDate() || startDate.getDate() === today.getDate() - 1)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 5 && (endDate.getDay() === 5 || endDate.getDay() === 4) &&
                (endDate.getDate() === today.getDate() || endDate.getDate() === today.getDate() - 1)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                })
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 6 && (startDate.getDay() === 6 || startDate.getDay() === 5 || startDate.getDay() === 4) &&
                (startDate.getDate() === today.getDate() || startDate.getDate() === today.getDate() - 1 || startDate.getDate() === today.getDate() - 2)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 6 && (endDate.getDay() === 6 || endDate.getDay() === 5 || endDate.getDay() === 4) &&
                (endDate.getDate() === today.getDate() || endDate.getDate() === today.getDate() - 1 || endDate.getDate() === today.getDate() - 2)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 0 && today.getHours() < 16 && (startDate.getDay() === 0 || startDate.getDay() === 5 || startDate.getDay() === 4 || startDate.getDay() === 7 || startDate.getDay() === 6) &&
                (startDate.getDate() === today.getDate() || startDate.getDate() === today.getDate() - 1 || startDate.getDate() === today.getDate() - 2 || startDate.getDate() === today.getDate() - 3
                    || startDate.getDate() === today.getDate() - 4)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (dayOfWeek === 0 && today.getHours() < 16 && (endDate.getDay() === 0 || endDate.getDay() === 5 || endDate.getDay() === 4 || endDate.getDay() === 7 || endDate.getDay() === 6) &&
                (endDate.getDate() === today.getDate() || endDate.getDate() === today.getDate() - 1 || endDate.getDate() === today.getDate() - 2 || endDate.getDate() === today.getDate() - 3
                    || endDate.getDate() === today.getDate() - 4)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات في أيام الاجازه-في هذه الفتره- سيتم فتحها أول يوم عمل بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true to indicate that the export should not proceed
            }
            if (isYesterday(startDate) || isYesterday(endDate)) {
                Swal.fire({
                    title: "Dear ," + username,
                    text: "لا يمكن إظهار مبيعات امس الا في اليوم التالي بعد الساعه ٤ ",
                    icon: "info",
                    timer: 4500
                });
                return true; // Return true if either date is yesterday
            }
            return false; // Return false if neither date is yesterday
        }
        let DisplayButton = document.getElementById('DisplayButton');
        let exportButton = document.getElementById('exportButton');
        let actionInput = document.getElementById('actionValue'); // Reference to the hidden input
        DisplayButton.addEventListener('click', function (event) {
            event.preventDefault();
            if (checkDates()) {
                // If either date is yesterday, do not continue with the rest of the code
                return;
            }
            let timerInterval;
            Swal.fire({
                title: "Dear ," + username + " Wait Report ",
                html: "Wait Report will be shown <b></b> milliseconds.",
                timer: 1000000,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading();
                    const timer = Swal.getPopup().querySelector("b");
                    timerInterval = setInterval(() => {
                        timer.textContent = `${Swal.getTimerLeft()}`;
                    }, 100);
                },
                willClose: () => {
                    clearInterval(timerInterval);
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log("I was closed by the timer");
                }
            });
            exportButton.disabled = true;
            DisplayButton.disabled = true;
            startStopwatch();
            actionInput.value = 1; // Set the value to 1 for Display action
            submitExportForm(); // Submit the export form
        }); 
        exportButton.addEventListener('click', function (event) {
            event.preventDefault();
            if (checkDates()) {
                // If either date is yesterday, do not continue with the rest of the code
                return;
            }
            let timerInterval;
            Swal.fire({
                title: "Dear ," + username + " Wait Report ",
                html: "Wait Report will be shown <b></b> milliseconds.",
                timer: 1000000,
                timerProgressBar: true,
                didOpen: () => {
                    Swal.showLoading();
                    const timer = Swal.getPopup().querySelector("b");
                    timerInterval = setInterval(() => {
                        timer.textContent = `${Swal.getTimerLeft()}`;
                    }, 100);
                },
                willClose: () => {
                    clearInterval(timerInterval);
                }
            }).then((result) => {
                /* Read more about handling dismissals below */
                if (result.dismiss === Swal.DismissReason.timer) {
                    console.log("I was closed by the timer");
                }
            });
            exportButton.disabled = true;
            DisplayButton.disabled = true;
            startStopwatch();
            actionInput.value = 2; // Set the value to 1 for Display action
            submitExportForm(); // Submit the export form
        });

        // Event listener for the cancel export button
        // Assuming cancelExportButton is defined elsewhere in your script
        cancelExportButton.addEventListener('click', function (event) {
            event.preventDefault();
            cancelExport(); // Call the cancelExport function
        });

        // Function to handle export submission
        function submitExportForm() {
            var endDateValue = document.getElementById('endDate').value;
            var startDateValue = document.getElementById('startDate').value;

            // Save the endDate value to local storage
            localStorage.setItem('endDate', endDateValue);
            localStorage.setItem('startDate', startDateValue);

            // Clear the input field after saving
            document.getElementById('endDate').value = endDateValue;
            document.getElementById('startDate').value = startDateValue;
            exportForm.submit(); // Submit the export form
            checkExportStatus(); // Check export status immediately after submission

            // Set up an interval to check export status periodically
            checkStatusInterval = setInterval(checkExportStatus, 1000);
        }

        function checkExportStatus() {
            $.ajax({
                url: '/Tender/CheckExportStatus',
                type: 'GET',
                success: function (status) {
                    console.log(status);
                    if (status === 'complete') {
                        stopStopwatch();
                        exportButton.disabled = false;
                        DisplayButton.disabled = false;
                        Swal.fire({
                            title: "You Export Report Successfully",
                            icon: "success",
                            timer: 5500
                        });
                    } else {
                        setTimeout(checkExportStatus, 1000);
                    }
                },
                error: function () {
                    exportButton.disabled = false;
                    DisplayButton.disabled = false;
                }
            });
        }
    </script>

    @*   @section Scripts {
    <script type="text/javascript">
    window.addEventListener('beforeunload', function (event) {
    // Make an AJAX call to a server-side endpoint that clears the session or marks the user as logged out
    fetch('/Account/Logout', {
    method: 'POST',
    headers: {
    'Content-Type': 'application/json',
    },
    body: JSON.stringify({ logout: true }),
    });
    });
    </script>
    }  *@
</body>
</html>

