@* @model CK.DTO.SalesOrderDTO
<!Doctype html>
<html>
<head>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11.7.3/dist/sweetalert2.min.css">

    <style>

        /* Container for the search results */
        .search-results {
            list-style-type: none; /* Remove default list bullets */
            padding: 0;
            margin: 0;
            position: absolute; /* Position it below the search input */
            max-height: 300px; /* Limit the height */
            overflow-y: auto; /* Enable scrolling when the list exceeds the max-height */
            font-size: 14px;
            width: 18%; /* Make it as wide as the input */
            background-color: #fff; /* White background */
            border: 1px solid #ccc; /* Light gray border */
            border-radius: 4px; /* Slight rounding of corners */
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Soft shadow to make it float */
            z-index: 9999; /* Ensure it appears on top of other elements */
        }

            /* Item in the search results */
            .search-results li {
                padding: 10px; /* Add padding for spacing */
                cursor: pointer; /* Pointer cursor to indicate interactivity */
                transition: background-color 0.3s ease; /* Smooth transition for background color */
            }

                /* Highlight the item when hovered */
                .search-results li:hover {
                    background-color: #f0f0f0; /* Light gray when hovered */
                    color: #007bff; /* Change text color to blue */
                }

                /* Active or selected item */
                .search-results li.selected {
                    background-color: #007bff; /* Highlight selected item with a blue background */
                    color: white; /* Change text color to white */
                }

        /* Clear any borders or padding on the input field */
        .item-search {
            position: relative; /* Ensure the input field is above the dropdown list */
            width: 100%; /* Take up full width of its container */
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 14px;
        }

            /* Display the input field and results container with proper spacing */
            .item-search + .search-results {
                margin-top: 5px; /* Space between input and dropdown */
            }

            /* Optional: Add focus style to the input */
            .item-search:focus {
                border-color: #007bff; /* Border turns blue when focused */
                outline: none; /* Remove the default outline */
            }

        /* .Contain {
                    transform: scale(0.8);
                    transform-origin: top;
                } */
        /* Fieldset Section */
        .form-section {
            border: 2px solid #007bff;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 8px;
            background-color: #f8f9fa;
            position: relative;
        }

        /* Legend Styling */
        .section-legend {
            font-size: 1.5rem;
            font-weight: bold;
            color: #007bff;
            background-color: #f8f9fa;
            padding: 0 10px;
            position: absolute;
            top: -14px;
            left: 15px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.1);
            border-radius: 5px;
        }
        /* Header Container */
        .header-container {
            color: white;
            padding: 20px 0;
            text-align: center;
        }

        /* Header Title */
        .header-title {
            font-size: 2.5rem;
            font-weight: bold;
            text-shadow: 2px 2px 5px rgb(255 0 0 / 40%);
            margin-bottom: 10px;
            text-transform: uppercase;
        }
        /* General Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Form Container */
        .form-container {
            max-width: 900px;
            margin: 20px auto;
            padding: 20px;
            background: #fff;
            border-radius: 10px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
            font-family: Arial, Helvetica, sans-serif;
        }

        /* Section Headers */
        .form-section legend {
            font-size: 18px;
            font-weight: bold;
        }

        /* Group Styling */
        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                display: block;
                margin-bottom: 5px;
                font-weight: bold;
            }

        /* Table Details Section */
        .details-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }

            .details-table th,
            .details-table td {
                border: 1px solid #ddd;
                padding: 10px;
                text-align: center;
            }

            .details-table th {
                background: #007bff;
                color: #fff;
            }

        /* Buttons */
        .btn {
            padding: 8px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: all 0.2s ease;
        }

            .btn:hover {
                opacity: 0.9;
            }

        .btn-primary {
            background-color: #007bff;
            color: white;
        }

        .btn-success {
            background-color: #28a745;
            color: white;
        }

        .btn-danger {
            background-color: #dc3545;
            color: white;
        }

        /* Total Inputs */
        label {
            font-weight: bold;
            margin: 5px 0;
        }

        .form-control {
            width: 100%;
            padding: 8px;
            margin-bottom: 10px;
            box-sizing: border-box;
        }

        .form-row {
            display: flex;
            justify-content: space-between;
            gap: 15px;
        }

        /* Column Responsiveness */
        .col-md-6 {
            flex: 0 0 48%;
            max-width: 48%;
        }

        /* Header Section Base */
        .form-container {
            max-width: 900px;
            margin: 20px auto;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }

        /* Style for grouped select fields */
        .form-group {
            margin-bottom: 15px;
        }

            .form-group label {
                font-weight: bold;
            }

        /* Style Select Fields */
        .FilterSelect,
        .form-control {
            padding: 8px;
            box-sizing: border-box;
            width: 100%;
            font-size: 14px;
        }

        /* Notes Section */
        textarea {
            height: 100px;
            resize: none;
        }

        .alert {
            padding: 15px;
            margin-bottom: 20px;
            border: 1px solid transparent;
            border-radius: 4px;
        }

        .alert-success {
            color: #155724;
            background-color: #d4edda;
            border-color: #c3e6cb;
        }
    </style>

</head>
<body>
    <div class="Contain">
        <div class="header-container">
            <h1 class="header-title">Create Sales Order</h1>
        </div>
        <form id="myForm" method="post" asp-action="CreateSalesOrder" class="form-container">
            <!-- Header Section -->
            <fieldset class="form-section">
                <legend class="section-legend">Main Data</legend>

                <!-- First row: Sales Code and Date -->
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="SalesCode">Sales Code</label>
                        <input type="text" asp-for="HSalesCode" id="SalesCode" class="form-control" readonly />
                    </div>
                    <div class="form-group col-md-6">
                        <label for="SalesOrderDate">Date</label>
                        <input type="date" asp-for="SalesOrderDate" value="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control" />
                    </div>
                </div>

                <!-- Second row: Branch Code and Customer Code -->
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="SalesOrderDate">Customer</label>
                        <select class="FilterSelect form-control" asp-for="CustomerCode" id="CustomerCode" asp-items="@(new SelectList(ViewBag.VBCustomer,"CustomerCode1","CustomerName"))">
                            <option value="0">All Customers</option>
                        </select>
                    </div>
                    <div class="form-group col-md-6">
                        <label for="BranchCode">Branch Code</label>
                        <select class="FilterSelect form-control" asp-for="BranchCode" id="BranchCode" asp-items="@(new SelectList(ViewBag.VBBranch,"BranchId","BranchName"))">
                            <option value="0">All Branches</option>
                        </select>
                    </div>
                </div>

                <!-- Third row: Category Code -->
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label for="CategoryCode">Category Code</label>
                        <select class="FilterSelect form-control" asp-for="CategoryCode" id="CategoryCode" asp-items="@(new SelectList(ViewBag.VBDepartment))">
                            <option value="0">All Categories</option>
                        </select>
                    </div>
                </div>

                <!-- Notes Section -->
                <div class="form-group">
                    <label for="Notes">Notes</label>
                    <textarea class="FilterSelect form-control" asp-for="Notes" id="Notes"></textarea>
                </div>
            </fieldset>
            <input type="text" name="Details[${rowCount}].Quantity" style="display:none"
                   class="form-control quantity-input"
                   placeholder="Quantity"
                   data-max-quantity="0" />
            <!-- Details Section -->
            <fieldset class="form-section">
                <legend class="section-legend">Details</legend>
                <table id="detailsTable" class="details-table">
                    <thead>
                        <tr>
                            <th>Item Code</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Total</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detail in Model.SalesOrders)
                        {
                        <tr>
                            <td>
                                <input type="text" class="form-control item-search" name="Details[@detail].ItemCode" value="@detail.ItemCode" placeholder="Search Item" />
                                <ul class="search-results"></ul>
                            </td>
                            <td>
                                <input type="text" name="Details[@detail].Price" class="form-control price-input" value="@detail.Price" placeholder="Price" readonly />
                            </td>
                            <td>
                                <input type="number" name="Details[@detail].Quantity" class="form-control quantity-input" value="@detail.Quantity" placeholder="Quantity" />
                            </td>
                            <td>
                                <input type="number" name="Details[@detail].Total" class="form-control row-total" value="@detail.Total" placeholder="Total" readonly />
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger remove-row">Remove</button>
                            </td>
                        </tr>
                        }
                    </tbody>

                </table>
                <button type="button" id="addRow" class="btn btn-primary">Add Row</button>
            </fieldset>
            <div class="form-row">
                <div class="form-group col-md-6">
                    <label>Grand Total</label>
                    <input type="number" class="form-control" asp-for="GrandTotal" id="grandTotal" readonly />
                </div>
                <div class="form-group col-md-6">
                    <label>Fees</label>
                    <input type="number" class="form-control" id="Fees" readonly />
                </div>
                <div class="form-group col-md-6">
                    <label id="grandTotalWithFeesLabel">
                        Grand Total with Fees: + <input type="button" id="AdditionalFees" readonly style="background-color: #f8f9fa;
                                                    border: none;
                                                    color: red;" />
                        <span style="display: flex; align-items: center;">
                            <input type="number" class="form-control" asp-for="GrandTotalWithFees" id="grandTotalWithFees" readonly style="margin-right: 10px;" />
                        </span>
                    </label>
                </div>
            </div>
            <button type="submit" id="saveButton" class="btn btn-success">Save</button>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const customerSelect = document.getElementById('CustomerCode');
            const branchSelect = document.getElementById('BranchCode');
            const categorySelect = document.getElementById('CategoryCode');
            const addRowButton = document.getElementById('addRow');
            const saveButton = document.getElementById('saveButton');
            const detailsTable = document.getElementById('detailsTable').querySelector('tbody');

            // // Disable Branch and Category initially
            // branchSelect.disabled = true;
            // categorySelect.disabled = true;

            // // Enable Branch only after Customer is selected
            // customerSelect.addEventListener('change', function () {
            //     if (customerSelect.value !== '0') {
            //         branchSelect.disabled = false;
            //     } else {
            //         branchSelect.disabled = true;
            //         categorySelect.disabled = true;
            //         branchSelect.value = '0';
            //         categorySelect.value = '0';
            //     }
            // });

            // // Enable Category only after Branch is selected
            // branchSelect.addEventListener('change', function () {
            //     if (branchSelect.value !== '0') {
            //         categorySelect.disabled = false;
            //     } else {
            //         categorySelect.disabled = true;
            //         categorySelect.value = '0';
            //     }
            // });
            // Validation on Save Button
            saveButton.addEventListener('click', function (event) {
                event.preventDefault();

                // Check Customer selection
                if (customerSelect.value === '0') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: 'Please select a Customer before proceeding.',
                    });
                    return;
                }

                // Check Branch selection
                if (branchSelect.value === '0') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: 'Please select a Branch before proceeding.',
                    });
                    return;
                }

                // Check Category selection
                if (categorySelect.value === '0') {
                    Swal.fire({
                        icon: 'error',
                        title: 'Validation Error',
                        text: 'Please select a Category before proceeding.',
                    });
                    return;
                }

                // Validate rows in the details table
                let allValid = true;
                const rows = detailsTable.querySelectorAll('tr');
                rows.forEach(row => {
                    const itemSearchInput = row.querySelector('.item-search');  // Search box for the item
                    const priceInput = row.querySelector('.price-input');
                    const quantityInput = row.querySelector('.quantity-input');

                    // Check if an item is selected by ensuring the search box has a value and is not empty
                    if (!itemSearchInput || itemSearchInput.value === '') {
                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: 'Please select an Item in each row from the search results.',
                        });
                        allValid = false;
                    } else if (!priceInput || priceInput.value === '' || parseFloat(priceInput.value) <= 0) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: 'Please ensure each row has a valid Price.',
                        });
                        allValid = false;
                    } else if (!quantityInput || quantityInput.value === '' || parseFloat(quantityInput.value) <= 0) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Validation Error',
                            text: 'Please ensure each row has a valid Quantity.',
                        });
                        allValid = false;
                    }
                });

                if (!allValid) return;

                // Proceed to save if all validations pass
                Swal.fire({
                    icon: 'success',
                    title: 'Validated',
                    text: 'All validations passed. Proceeding to save...',
                    timer: 3000,
                    timerProgressBar: true,
                    willClose: () => {
                        document.getElementById('myForm').submit();
                    }
                });

            });
        });
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const CustomerCode = document.getElementById("CustomerCode");
            const BranchCode = document.getElementById("BranchCode");
            const Fees = document.getElementById("Fees"); // Reference the Fees text field
            const Fees2 = document.getElementById("AdditionalFees"); // Reference the Fees2 text field

            // Handle Customer selection
            CustomerCode.addEventListener("change", function () {
                const selectedCustomer = this.value;

                if (selectedCustomer && selectedCustomer !== "0") {
                    fetch(`/SalesOrder/GetFilteredBranch?customer=${selectedCustomer}`)
                        .then(response => response.json())
                        .then(data => {
                            BranchCode.innerHTML = '<option value="0">All Branches</option>';
                            let totalServiceCost = 0;

                            data.forEach(branch => {
                                const option = document.createElement("option");
                                option.value = branch.branchId;
                                option.dataset.serviceCost = branch.serviceCost || 0; // Default to 0 if missing
                                option.textContent = branch.branchName;
                                BranchCode.appendChild(option);

                                // Sum up service costs
                                totalServiceCost += parseFloat(branch.serviceCost) || 0;
                            });

                            // Handle no branches case
                            if (data.length === 0) {
                                Fees.value = '';
                                Fees2.value = '';
                            } else {
                                // Display the first branch's ServiceCost or total, depending on requirement
                                Fees.value = data.length === 1 ? data[0].serviceCost : totalServiceCost.toFixed(2);
                                Fees2.value = data.length === 1 ? data[0].serviceCost : totalServiceCost.toFixed(2);
                            }
                        })
                        .catch(error => {
                            console.error("Error fetching branches:", error);
                            Fees.value = '';
                            Fees2.value = '';
                        });
                } else {
                    BranchCode.innerHTML = '<option value="0">All Branches</option>';
                    Fees.value = '';
                    Fees2.value = '';
                }
            });

            // Handle Branch selection
            BranchCode.addEventListener("change", function () {
                const selectedBranch = BranchCode.options[BranchCode.selectedIndex];
                const serviceCost = selectedBranch.dataset.serviceCost || ''; // Retrieve ServiceCost
                Fees.value = serviceCost; // Set the Fees text field
                Fees2.value = serviceCost; // Set the AdditionalFees text field
            });
        });
    </script>
    <script>
        var success = '@TempData["SuccessMessage"]';
        if (success === "Sales Order has been successfully created!") {
            window.addEventListener('load', function () {
                Swal.fire({
                    title: "Good, You Create Invoice Successfully",
                    icon: "success",
                    timer: 6500
                });
            });
        }
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const categorySelect = document.getElementById("CategoryCode");
            const detailsTable = document.getElementById("detailsTable").querySelector("tbody");
            const addRowButton = document.getElementById("addRow");

            let currentItems = []; // Store fetched items
            // Function to calculate totals
            function calculateTotals() {
                let grandTotal = 0;
                const rowTotals = document.querySelectorAll(".row-total");
                rowTotals.forEach(rowTotal => {
                    const value = parseFloat(rowTotal.value) || 0;
                    grandTotal += value;
                });
                const fees = parseFloat(document.getElementById("Fees").value) || 0;
                document.getElementById("grandTotal").value = grandTotal.toFixed(2);
                document.getElementById("grandTotalWithFees").value = (grandTotal + fees).toFixed(2);
            }

            // Function to update row totals
            function updateRowTotal(row) {
                const priceField = row.querySelector(".price-input");
                const quantityField = row.querySelector(".quantity-input");
                const totalField = row.querySelector(".row-total");

                const price = parseFloat(priceField.value) || 0;
                const quantity = parseFloat(quantityField.value) || 0;
                const total = price * quantity;

                totalField.value = total.toFixed(2);
                calculateTotals();
            }
            // Function to fetch items by category
            async function fetchItemsByCategory(categoryId) {
                const branchCode = document.getElementById("BranchCode").value; // Retrieve branchCode dynamically
                if (!branchCode || branchCode === "0" || !categoryId || categoryId === "0") {
                    console.warn("Invalid branchCode or categoryId");
                    return [];
                }

                console.log("Fetching items for branch:", branchCode, "category:", categoryId);

                try {
                    const response = await fetch(`/SalesOrder/GetFilteredItems?Branch=${branchCode}&Category=${categoryId}`, {
                        method: "GET",
                        headers: { "Accept": "application/json" },
                    });

                    if (response.ok) {
                        const jsonData = await response.json();
                        console.log("Fetched items:", jsonData);
                        currentItems = jsonData; // Store the fetched items
                        updateAllRows(); // Automatically update the rows with the fetched items
                    } else {
                        console.error("Failed to fetch items:", response.statusText);
                        currentItems = [];
                    }
                } catch (error) {
                    console.error("Error fetching items:", error);
                    currentItems = [];
                }
            }

            // Function to handle search input and display matching items
            function handleItemSearch(event) {
                const searchInput = event.target;
                const searchTerm = searchInput.value.toLowerCase().trim();
                const resultsContainer = searchInput.nextElementSibling; // Assuming <ul> for search results
                resultsContainer.innerHTML = ''; // Clear previous results

                if (searchTerm === '') {
                    resultsContainer.style.display = 'none'; // Hide results if search term is empty
                    return;
                }

                const filteredItems = currentItems.filter(item =>
                    item.itemName.toLowerCase().includes(searchTerm)
                );

                if (filteredItems.length > 0) {
                    resultsContainer.style.display = 'block'; // Show results
                    filteredItems.forEach(item => {
                        const li = document.createElement('li');
                        li.textContent = item.itemName;
                        li.dataset.itemId = item.itemId; // Store the item ID in data attribute
                        li.addEventListener('click', () => selectItem(item, searchInput, resultsContainer));
                        resultsContainer.appendChild(li);
                    });
                } else {
                    resultsContainer.style.display = 'none'; // Hide if no results
                }
            }
            // Function to handle item selection from the search results
            async function selectItem(item, searchInput, resultsContainer) {
                searchInput.value = item.itemName; // Fill input field with item name
                const row = searchInput.closest("tr");
                const priceField = row.querySelector(".price-input");
                const quantityField = row.querySelector(".quantity-input");

                // Set price (or fetch it if necessary) and quantity
                priceField.value = item.price || 0; // Set the item price if available

                // Fetch the price if not available and set the max quantity
                const branchCode = document.getElementById("BranchCode").value;
                await fetchPrice(branchCode, item.itemId, priceField, quantityField);

                // Hide search results
                resultsContainer.style.display = 'none';

                // Optionally, you can also update row total here
                updateRowTotal(row);
            }

            // Function to fetch price and set max quantity
            async function fetchPrice(branchCode, itemId, priceField, quantityField) {
                if (!branchCode || !itemId || branchCode === "0" || itemId === "0") {
                    console.warn("Invalid branchCode or itemId");
                    return;
                }

                console.log("Fetching price for branch:", branchCode, "item:", itemId);

                try {
                    const response = await fetch("/SalesOrder/GetPrice", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({ branchCode, itemId }),
                    });

                    if (response.ok) {
                        const data = await response.json();
                        console.log("Fetched price and quantity:", data);

                        priceField.value = (data.price || 0).toFixed(2);

                        // Set the fetched quantity and max quantity for validation
                        const fetchedQuantity = data.quantity || 0;
                        quantityField.value = ""; // Leave the field empty for user input
                        quantityField.setAttribute("data-max-quantity", fetchedQuantity.toFixed(2));
                    } else {
                        console.error("Failed to fetch price:", response.statusText);
                    }
                } catch (error) {
                    console.error("Error fetching price:", error);
                }
            }

            // Populate rows with items when category changes
            categorySelect.addEventListener("change", async function () {
                const selectedCategory = categorySelect.value;
                if (!selectedCategory || selectedCategory === "0") return;

                await fetchItemsByCategory(selectedCategory); // Fetch items based on selected category
            });

            // Update all rows with new items
            function updateAllRows() {
                const rows = detailsTable.querySelectorAll(".item-search");
                rows.forEach(input => {
                    input.addEventListener('input', handleItemSearch); // Attach search event handler to input fields
                    const resultsContainer = input.nextElementSibling; // <ul> element for search results
                    resultsContainer.innerHTML = ''; // Clear any previous results

                    // Show results container when the input box is focused
                    input.addEventListener('focus', () => {
                        resultsContainer.style.display = 'block';
                        handleItemSearch({ target: input }); // Trigger search when focused
                    });

                    // Automatically populate search results when the category is selected
                    handleItemSearch({ target: input });
                });
            }

            // Add new row to the table
            addRowButton.addEventListener("click", function () {
                const rowCount = detailsTable.querySelectorAll("tr").length;

                const newRow = `
                            <tr>
                                <td>
                                    <input type="text" class="form-control item-search" name="Details[${rowCount}].ItemCode" placeholder="Search Item" />
                                    <ul class="search-results" style="display: none;"></ul>
                                </td>
                                <td>
                                    <input type="number" name="Details[${rowCount}].Price" class="form-control price-input" placeholder="Price" readonly />
                                </td>
                                <td>
                                    <input type="number" name="Details[${rowCount}].Quantity" class="form-control quantity-input" placeholder="Quantity" />
                                </td>
                                <td>
                                    <input type="number" name="Details[${rowCount}].Total" class="form-control row-total" placeholder="Total" readonly />
                                </td>
                                <td>
                                    <button type="button" class="btn btn-danger remove-row">Remove</button>
                                </td>
                            </tr>`;

                detailsTable.insertAdjacentHTML("beforeend", newRow);
                const newInput = detailsTable.querySelectorAll(".item-search")[rowCount];
                const resultsContainer = newInput.nextElementSibling; // <ul> element for search results
                newInput.addEventListener('input', handleItemSearch); // Attach search event handler to input fields
                resultsContainer.innerHTML = ''; // Clear any previous results

                // Display the search results when the search box is clicked
                newInput.addEventListener('focus', () => {
                    resultsContainer.style.display = 'block';
                    handleItemSearch({ target: newInput }); // Trigger search when focused
                });

                // Automatically trigger search on new row after category is selected
                handleItemSearch({ target: newInput });
            });

            // Update row total dynamically
            detailsTable.addEventListener("input", function (e) {
                if (e.target && e.target.classList.contains("quantity-input")) {
                    const row = e.target.closest("tr");
                    updateRowTotal(row);
                }
            });

            // Remove row
            detailsTable.addEventListener("click", function (e) {
                if (e.target && e.target.classList.contains("remove-row")) {
                    const row = e.target.closest("tr");
                    row.remove();
                    calculateTotals();
                }
            });

            // Initial calculation
            calculateTotals();
        });

    </script>

</body>
</html>
 *@